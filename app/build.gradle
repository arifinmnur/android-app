import java.text.SimpleDateFormat

plugins {
  id "com.google.protobuf" version "0.8.12"
  id 'com.android.application'
  id 'kotlin-android'
  id 'kotlin-kapt'
  id 'kotlin-parcelize'
  id 'androidx.navigation.safeargs.kotlin'
  id 'idea'
  id 'jacoco'
  id 'com.google.firebase.firebase-perf'
}

static buildTime() {
  def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
  df.setTimeZone(TimeZone.getTimeZone("UTC"))
  return df.format(new Date())
}

def gitHash() {
  return "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()
}

def version = "1.4.0"
def version_code = 120

android {
  compileSdkVersion 30
  buildToolsVersion "29.0.3"

  buildFeatures {
    dataBinding true
  }

  defaultConfig {
    applicationId "com.kelsos.mbrc"
    minSdkVersion 23
    targetSdkVersion 30
    versionCode version_code
    versionName version
    buildConfigField "String", "GIT_SHA", "\"${gitHash()}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""

    // Enabling multidex support.
    multiDexEnabled true

    testInstrumentationRunner 'com.kelsos.mbrc.MockTestRunner'
    testApplicationId "com.kelsos.mbrc.test"
    vectorDrawables.useSupportLibrary = true
  }

  testOptions {
    execution 'ANDROIDX_TEST_ORCHESTRATOR'
    animationsDisabled true

    unitTests {
      includeAndroidResources = true
      returnDefaultValues = true
    }
  }

  compileOptions {
    // Flag to enable support for the new language APIs
    coreLibraryDesugaringEnabled true
    // Sets Java compatibility to Java 8
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8.toString()
  }

  dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.0'
  }

  signingConfigs {
    release {
      storeFile file('placeholder')
      keyAlias "placeholder"
      storePassword "placeholder"
      keyPassword "placeholder"
    }
  }

  flavorDimensions "basic"

  buildTypes {
    release {
      signingConfig signingConfigs.release
      debuggable false
      zipAlignEnabled true
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      buildConfigField "String", "GIT_SHA", "\"${gitHash()}\""
      buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
    }

    debug {
      applicationIdSuffix ".dev"
      versionNameSuffix "-dev"
      testCoverageEnabled true

      buildConfigField "String", "GIT_SHA", "\"debug_build\""
      buildConfigField "String", "BUILD_TIME", "\"debug_build\""
    }
  }

  productFlavors {
    play {
      ext.enableCrashlytics = true
      apply plugin: 'com.google.gms.google-services'
      apply plugin: 'com.google.firebase.crashlytics'
    }

    github {
      ext.enableCrashlytics = false
    }
  }


  packagingOptions {
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
    exclude "**/module-info.class"
    pickFirst("META-INF/atomicfu.kotlin_module")
  }

  lintOptions {
    abortOnError false
    lintConfig file("lint.xml")
    xmlReport false
    htmlReport true
    htmlOutput file("$project.buildDir/reports/lint/lint-result.html")
    xmlOutput file("$project.buildDir/reports/lint/lint-result.xml")
  }

  dexOptions {
    javaMaxHeapSize "2G"
  }

  android.applicationVariants.all { variant ->
    variant.outputs.all {
      outputFileName = "${defaultConfig.applicationId}-${variant.flavorName}-${variant.versionCode}-v${variant.versionName}.apk"
    }
  }
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

dependencies {
  implementation project(path: ':changelog')
  implementation 'androidx.viewpager2:viewpager2:1.0.0'

  //Instrumentation Test dependencies
  androidTestImplementation 'androidx.annotation:annotation:1.2.0-beta01'

  androidTestImplementation 'androidx.multidex:multidex-instrumentation:2.0.0'
  androidTestImplementation 'androidx.test:runner:1.3.1-alpha03'
  androidTestImplementation 'androidx.test:rules:1.3.1-alpha03'
  androidTestImplementation 'androidx.test.ext:junit:1.0.0'
  androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0-alpha03'
  androidTestImplementation('androidx.test.espresso:espresso-core:3.4.0-alpha03', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })
  androidTestImplementation 'androidx.test.ext:truth:1.0.0'

  androidTestUtil 'androidx.test:orchestrator:1.3.1-alpha03'

  androidTestImplementation "io.mockk:mockk-android:1.9.1"

  androidTestImplementation 'com.linkedin.testbutler:test-butler-library:2.0.0'
  androidTestUtil 'com.linkedin.testbutler:test-butler-app:2.0.0@apk'

  // Test dependencies
  testImplementation 'org.koin:koin-test:1.0.2'

  testImplementation "androidx.test:runner:1.1.1"
  testImplementation "androidx.test.ext:junit:1.1.0"
  testImplementation "androidx.test.espresso:espresso-intents:3.1.1"
  testImplementation "androidx.test.espresso:espresso-core:3.1.1"
  testImplementation "androidx.test.ext:truth:1.1.0"
  testImplementation "android.arch.core:core-testing:1.1.1"
  testImplementation "android.arch.persistence.room:testing:1.1.1"

  testImplementation "io.mockk:mockk:1.9.1"
  testImplementation "com.google.truth:truth:0.42"

  testImplementation "org.robolectric:robolectric:4.2"
  testImplementation "org.robolectric:shadows-multidex:4.2"

  //The android library only will fail the robolectric tests
  testImplementation 'org.threeten:threetenbp:1.5.0'

  implementation 'androidx.appcompat:appcompat:1.2.0'
  implementation 'androidx.media:media:1.2.1'

  implementation 'com.google.android.material:material:1.3.0-alpha03'
  kapt 'androidx.databinding:databinding-compiler:4.1.2'

  implementation 'androidx.appcompat:appcompat:1.2.0'
  implementation 'androidx.media:media:1.2.1'

  implementation 'androidx.core:core-ktx:1.5.0-beta01'

  implementation 'androidx.annotation:annotation:1.1.0'
  implementation 'androidx.recyclerview:recyclerview:1.1.0'
  implementation 'androidx.preference:preference-ktx:1.1.1'
  implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

  implementation 'android.arch.navigation:navigation-fragment-ktx:1.0.0-rc02'
  implementation 'android.arch.navigation:navigation-ui-ktx:1.0.0-rc02'

  implementation "androidx.paging:paging-runtime-ktx:2.1.2";

  implementation 'androidx.room:room-runtime:2.2.6';
  implementation "androidx.room:room-ktx:2.2.6"
  kapt 'androidx.room:room-compiler:2.2.6'

  implementation 'com.squareup.moshi:moshi:1.11.0'
  kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.11.0'

  implementation 'org.koin:koin-android:1.0.2'
  implementation 'org.koin:koin-androidx-scope:1.0.2'
  implementation 'org.koin:koin-androidx-viewmodel:1.0.2'

  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2'
  implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-rx2', version: '1.4.2'

  implementation 'androidx.multidex:multidex:2.0.1'
  implementation 'com.squareup.picasso:picasso:2.71828'
  implementation 'androidx.multidex:multidex:2.0.1'

  implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
  implementation 'io.reactivex.rxjava2:rxjava:2.2.20'
  implementation 'io.reactivex.rxjava2:rxkotlin:2.4.0'

  implementation 'com.jakewharton.timber:timber:4.7.1'
  implementation 'com.jakewharton.rxrelay2:rxrelay:2.1.1'
  implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

  implementation 'com.jakewharton.threetenabp:threetenabp:1.3.0'

  implementation "androidx.datastore:datastore-core:1.0.0-alpha02"
  implementation "com.google.protobuf:protobuf-javalite:3.14.0"

  def arrow_version = "0.8.2"
  implementation "io.arrow-kt:arrow-core:$arrow_version"
  implementation "io.arrow-kt:arrow-syntax:$arrow_version"
  implementation "io.arrow-kt:arrow-typeclasses:$arrow_version"
  implementation "io.arrow-kt:arrow-data:$arrow_version"
  implementation "io.arrow-kt:arrow-instances-core:$arrow_version"
  implementation "io.arrow-kt:arrow-instances-data:$arrow_version"
  kapt "io.arrow-kt:arrow-annotations-processor:$arrow_version"

  debugImplementation "com.squareup.leakcanary:leakcanary-android:2.5"

  // Import the BoM for the Firebase platform
  playImplementation platform('com.google.firebase:firebase-bom:25.12.0')

  // Declare the dependencies for the Crashlytics and Analytics libraries
  // When using the BoM, you don't specify versions in Firebase library dependencies
  playImplementation 'com.google.firebase:firebase-crashlytics-ktx'
  playImplementation 'com.google.firebase:firebase-analytics-ktx'

  playImplementation 'com.google.firebase:firebase-perf-ktx'
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:3.10.0"
  }

  // Generates the java Protobuf-lite code for the Protobufs in this project. See
  // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
  // for more information.
  generateProtoTasks {
    all().each { task ->
      task.builtins {
        java {
          option 'lite'
        }
      }
    }
  }
}


allprojects {
  afterEvaluate { project ->

    def signProperties = rootProject.file('signing.properties')
    if (signProperties.exists()) {
      def prop = new Properties()
      prop.load(new FileInputStream(signProperties))
      def filepath = prop["keys"]
      def keyProperties = file(filepath)
      if (keyProperties.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(keyProperties))
        def keystorePath = props['keystore']
        def releaseConfig = android.signingConfigs['release']
        releaseConfig.storeFile = file(keystorePath)
        releaseConfig.storePassword = props['storePass']
        releaseConfig.keyAlias = props['keyAlias']
        releaseConfig.keyPassword = props['keyPass']
      }
    }
  }
}

repositories {
  mavenCentral()
}

jacoco {
  toolVersion = "0.8.3"
}

configurations {
  ktlint
}

dependencies {
  ktlint "com.github.shyiko:ktlint:0.30.0"
  // additional 3rd party ruleset(s) can be specified here
  // just add them to the classpath (e.g. ktlint 'groupId:artifactId:version') and
  // ktlint will pick them up
}

task ktlint(type: JavaExec, group: "verification") {
  description = "Check Kotlin code style."
  classpath = configurations.ktlint
  main = "com.github.shyiko.ktlint.Main"
  args "src/**/*.kt"
  // to generate report in checkstyle format prepend following args:
  // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
  // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
  description = "Fix Kotlin code style deviations."
  classpath = configurations.ktlint
  main = "com.github.shyiko.ktlint.Main"
  args "-F", "src/**/*.kt"
}

apply plugin: 'com.google.gms.google-services'

android.applicationVariants.all { variant ->
  if (variant.name != 'play') {
    project.tasks.getByName('process' + variant.name.capitalize() + 'GoogleServices').enabled = false
  }
}
